{"version":3,"sources":["serviceWorker.js","components/Header/style.js","components/Header/Header.js","components/Main/style.js","yokais.js","components/Main/Main.js","GlobalStyle.js","App.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Container","styled","div","_templateObject","Header","react_default","a","createElement","style","react_fontawesome_index_es","icon","style_templateObject","Filters","_templateObject2","Filter","_templateObject3","Table","table","_templateObject4","yokais","name","tribe","rank","attribute","favoriteFood","evolution","Main","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","yokaisJson","handleCheckbox","bind","assertThisInitialized","event","checkboxtype","target","getAttribute","type","toLowerCase","checked","filterType","push","splice","indexOf","setState","defineProperty","_this2","_this$state","style_Container","map","key","includes","onChange","htmlFor","id","required","filter","yokai","aux","filters","keys","forEach","length","Component","GlobalStyle","createGlobalStyle","GlobalStyle_templateObject","App","Fragment","src_GlobalStyle","components_Header_Header","components_Main_Main","library","add","fab","faBars","faWindowClose","faHeart","faShareAlt","faUserCircle","faHome","faEnvelope","faPen","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.bfb67404.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import styled from 'styled-components';\n\nconst Container = styled.div`\n    height: 56px;\n    width: 100%;\n    z-index: 1;\n    background-color: #fdd835;\n    color: #000000;\n    box-shadow: 0 12px 17px 2px rgba(0, 0, 0, 0.14),\n        0 5px 22px 4px rgba(0, 0, 0, 0.12), 0 7px 8px -4px rgba(0, 0, 0, 0.2);\n    padding: 12px;\n    font-size: 24px;\n    display: flex;\n    align-items: center;\n    position: fixed;\n\n    h5 {\n        letter-spacing: 0;\n        font-size: 24px;\n        font-weight: 400;\n        margin-left: 24px;\n    }\n`;\n\nexport default Container;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport Container from './style';\n\nconst Header = () => (\n    <Container>\n        <FontAwesomeIcon icon=\"bars\" />\n        <h5>Yokaidex</h5>\n    </Container>\n);\n\nexport default Header;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n    background-color: #ffffff;\n    color: #000000;\n    padding: 24px;\n    font-size: 16px;\n\n    input[type='text'] {\n        border: 0.1rem solid #9e9e9e;\n        border-radius: 4px;\n        outline: none;\n        padding: 0 12px;\n        height: 48px;\n        width: 100%;\n        color: #212121;\n        margin: 24px 0;\n    }\n\n    h5 {\n        letter-spacing: 0;\n        font-size: 24px;\n        font-weight: 400;\n    }\n`;\n\nexport const Filters = styled.div`\n    display: flex;\n    justify-content: space-between;\n    margin: 24px 0;\n`;\n\nexport const Filter = styled.div`\n    display: flex;\n    flex-direction: column;\n`;\n\nexport const Table = styled.table`\n    margin: 24px 0;\n    width: 100%;\n    box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14),\n        0 3px 1px -2px rgba(0, 0, 0, 0.12), 0 1px 5px 0 rgba(0, 0, 0, 0.2);\n    border-radius: 4px;\n    padding: 12px;\n    border-collapse: collapse;\n\n    th {\n        background-color: #ab000d;\n        color: #ffffff;\n    }\n\n    th,\n    td {\n        text-align: left;\n        padding: 12px;\n    }\n\n    tr:nth-child(even) {\n        background-color: #f2f2f2;\n    }\n`;\n","const yokais = [\n    {\n        name: 'Pandle',\n        tribe: 'Brave',\n        rank: 'E',\n        attribute: 'Fire',\n        favoriteFood: 'Rice Balls',\n        evolution: 'Lv. 18 → Undy'\n    },\n    {\n        name: 'Undy',\n        tribe: 'Brave',\n        rank: 'C',\n        attribute: 'Fire',\n        favoriteFood: 'Rice Balls',\n        evolution: null\n    },\n    {\n        name: 'Tanbo',\n        tribe: 'Brave',\n        rank: 'B',\n        attribute: 'Earth',\n        favoriteFood: 'Rice Balls',\n        evolution: null\n    },\n    {\n        name: 'Cuttanah',\n        tribe: 'Brave',\n        rank: 'E',\n        attribute: 'Wind',\n        favoriteFood: 'Juice',\n        evolution: 'Lv. 20 → Cutta-nah-nah'\n    },\n    {\n        name: 'Cutta-nah-nah',\n        tribe: 'Brave',\n        rank: 'C',\n        attribute: 'Wind',\n        favoriteFood: 'Juice',\n        evolution: null\n    },\n    {\n        name: 'Darumacho',\n        tribe: 'Tough',\n        rank: 'B',\n        attribute: 'Earth',\n        favoriteFood: 'Curry (YW1: Bread)',\n        evolution: null\n    },\n    {\n        name: 'Goruma',\n        tribe: 'Tough',\n        rank: 'B',\n        attribute: 'Wind',\n        favoriteFood: 'Curry (YW1: Bread)',\n        evolution: null\n    }\n];\n\nexport default yokais;\n","/* eslint-disable react/destructuring-assignment */\n/* eslint-disable react/no-access-state-in-setstate */\n\nimport React, { Component } from 'react';\nimport { Container, Filter, Filters, Table } from './style';\nimport yokaisJson from '../../yokais';\n\nclass Main extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            tribe: [],\n            rank: [],\n            attribute: [],\n            yokais: yokaisJson\n        };\n\n        this.handleCheckbox = this.handleCheckbox.bind(this);\n    }\n\n    handleCheckbox(event) {\n        const checkboxtype = event.target.getAttribute('checkboxtype');\n        const type = event.target.name.toLowerCase();\n        const { checked } = event.target;\n        const filterType = this.state[checkboxtype];\n\n        if (checked) {\n            filterType.push(type);\n        } else {\n            filterType.splice(filterType.indexOf(type), 1);\n        }\n\n        this.setState({\n            [filterType]: filterType\n        });\n    }\n\n    render() {\n        const { tribe, rank, attribute, yokais } = this.state;\n        const tribesCheckbox = [\n            'Brave',\n            'Charming',\n            'Eerie',\n            'Heartful',\n            'Mysterious',\n            'Tough',\n            'Slippery',\n            'Shady',\n            'Wicked'\n        ];\n        const ranksCheckbox = ['A', 'B', 'C', 'D', 'E'];\n        const attributesCheckbox = [\n            'Fire',\n            'Water',\n            'Lightning',\n            'Earth',\n            'Ice',\n            'Wind',\n            'Drain',\n            'Restoration'\n        ];\n\n        return (\n            <Container>\n                <form>\n                    <div>\n                        <h5>Filters:</h5>\n                    </div>\n                    <Filters>\n                        <Filter>\n                            <h5>Tribes</h5>\n                            {tribesCheckbox.map(type => (\n                                <div key={type}>\n                                    <input\n                                        type=\"checkbox\"\n                                        checked={tribe.includes(\n                                            type.toLowerCase()\n                                        )}\n                                        name={type}\n                                        checkboxtype=\"tribe\"\n                                        onChange={this.handleCheckbox}\n                                    />\n                                    <label htmlFor={type}>{type}</label>\n                                </div>\n                            ))}\n                        </Filter>\n                        <Filter>\n                            <h5>Ranks</h5>\n                            {ranksCheckbox.map(type => (\n                                <div key={type}>\n                                    <input\n                                        type=\"checkbox\"\n                                        checked={rank.includes(\n                                            type.toLowerCase()\n                                        )}\n                                        name={type}\n                                        checkboxtype=\"rank\"\n                                        onChange={this.handleCheckbox}\n                                    />\n                                    <label htmlFor={type}>{type}</label>\n                                </div>\n                            ))}\n                        </Filter>\n                        <Filter>\n                            <h5>Attribute</h5>\n                            {attributesCheckbox.map(type => (\n                                <div key={type}>\n                                    <input\n                                        type=\"checkbox\"\n                                        checked={attribute.includes(\n                                            type.toLowerCase()\n                                        )}\n                                        name={type}\n                                        checkboxtype=\"attribute\"\n                                        onChange={this.handleCheckbox}\n                                    />\n                                    <label htmlFor={type}>{type}</label>\n                                </div>\n                            ))}\n                        </Filter>\n                    </Filters>\n                    <label htmlFor=\"name\">Search by name:</label>\n                    <input type=\"text\" id=\"name\" name=\"name\" required />\n                    <Table>\n                        <thead>\n                            <tr>\n                                <th>Name</th>\n                                <th>Tribe</th>\n                                <th>Rank</th>\n                                <th>Attribute</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {yokais\n                                .filter(yokai => {\n                                    let aux = true;\n\n                                    const filters = { tribe, rank, attribute };\n\n                                    Object.keys(filters).forEach(key => {\n                                        if (\n                                            filters[key].length > 0 &&\n                                            !filters[key].includes(\n                                                yokai[key].toLowerCase()\n                                            )\n                                        ) {\n                                            aux = false;\n                                        }\n                                    });\n\n                                    return aux;\n                                })\n                                .map(yokai => (\n                                    <tr key={yokai.name}>\n                                        <td>{yokai.name}</td>\n                                        <td>{yokai.tribe}</td>\n                                        <td>{yokai.rank}</td>\n                                        <td>{yokai.attribute}</td>\n                                    </tr>\n                                ))}\n                        </tbody>\n                    </Table>\n                </form>\n            </Container>\n        );\n    }\n}\n\nexport default Main;\n","import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\nbody {\n    display: flex;\n    flex-direction: column;\n}\n\n* {\n    font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;\n    box-sizing: border-box;\n    padding: 0;\n    margin: 0;\n}\n\nbody,\nhtml,\n#root {\n    height: 100%;\n    width: 100%;\n}\n\n/*\n    font-size: 62.5%;\n*/\n\n`;\n\nexport default GlobalStyle;\n","import React from 'react';\nimport Header from './components/Header';\nimport Main from './components/Main';\nimport GlobalStyle from './GlobalStyle';\n\nconst App = () => (\n    <>\n        <GlobalStyle />\n        <Header />\n        <Main />\n    </>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { fab } from '@fortawesome/free-brands-svg-icons';\nimport {\n    faWindowClose,\n    faBars,\n    faHeart,\n    faShareAlt,\n    faUserCircle,\n    faHome,\n    faEnvelope,\n    faPen\n} from '@fortawesome/free-solid-svg-icons';\n\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\n\nlibrary.add(\n    fab,\n    faBars,\n    faWindowClose,\n    faHeart,\n    faShareAlt,\n    faUserCircle,\n    faHome,\n    faEnvelope,\n    faPen\n);\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}